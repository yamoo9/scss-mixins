$white: alt-color(get-color(white), #fefefe) !default;
$black: alt-color(get-color(black), #010101) !default;

//* ----------------------------------------------------------------------------------- */
// 출처: https://css-tricks.com/programming-sass-to-create-accessible-color-combinations
//* ----------------------------------------------------------------------------------- */

// 참고: https://github.com/material-components/material-components-web/blob/master/packages/mdc-theme/_constants.scss
//
// Copyright 2017 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// 대비 차 계산에 필요한 미리 계산된 선형 색상 채널(linear channel) 값입니다.
// 참고: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
//
// 알고리즘: 0에서 255까지 c의 경우
// f(c) {
//   c = c / 255;
//   return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
// }
//
// 이 룩업 테이블은 SASS에 수학 pow() 함수가 없기 때문에 필요합니다.
$linear-channel-values: 0 0.0003035269835488375 0.000607053967097675
  0.0009105809506465125 0.00121410793419535 0.0015176349177441874
  0.001821161901293025 0.0021246888848418626 0.0024282158683907
  0.0027317428519395373 0.003035269835488375 0.003346535763899161
  0.003676507324047436 0.004024717018496307 0.004391442037410293
  0.004776953480693729 0.005181516702338386 0.005605391624202723
  0.006048833022857054 0.006512090792594475 0.006995410187265387
  0.007499032043226175 0.008023192985384994 0.008568125618069307
  0.009134058702220787 0.00972121732023785 0.010329823029626936
  0.010960094006488246 0.011612245179743885 0.012286488356915872
  0.012983032342173012 0.013702083047289686 0.014443843596092545
  0.01520851442291271 0.01599629336550963 0.016807375752887384
  0.017641954488384078 0.018500220128379697 0.019382360956935723
  0.0202885630566524 0.021219010376003555 0.022173884793387385
  0.02315336617811041 0.024157632448504756 0.02518685962736163
  0.026241221894849898 0.027320891639074894 0.028426039504420793
  0.0295568344378088 0.030713443732993635 0.03189603307301153
  0.033104766570885055 0.03433980680868217 0.03560131487502034
  0.03688945040110004 0.0382043715953465 0.03954623527673284 0.04091519690685319
  0.042311410620809675 0.043735029256973465 0.04518620438567554
  0.046665086336880095 0.04817182422688942 0.04970656598412723
  0.05126945837404324 0.052860647023180246 0.05448027644244237
  0.05612849004960009 0.05780543019106723 0.0595112381629812 0.06124605423161761
  0.06301001765316767 0.06480326669290577 0.06662593864377289
  0.06847816984440017 0.07036009569659588 0.07227185068231748
  0.07421356838014963 0.07618538148130785 0.07818742180518633
  0.08021982031446832 0.0822827071298148 0.08437621154414882 0.08650046203654976
  0.08865558628577294 0.09084171118340768 0.09305896284668745 0.0953074666309647
  0.09758734714186246 0.09989872824711389 0.10224173308810132
  0.10461648409110419 0.10702310297826761 0.10946171077829933 0.1119324278369056
  0.11443537382697373 0.11697066775851084 0.11953842798834562
  0.12213877222960187 0.12477181756095049 0.12743768043564743 0.1301364766903643
  0.13286832155381798 0.13563332965520566 0.13843161503245183
  0.14126329114027164 0.14412847085805777 0.14702726649759498
  0.14995978981060856 0.15292615199615017 0.1559264637078274 0.1589608350608804
  0.162029375639111 0.1651321945016676 0.16826940018969075 0.1714411007328226
  0.17464740365558504 0.17788841598362912 0.18116424424986022 0.184474994500441
  0.18782077230067787 0.19120168274079138 0.1946178304415758 0.19806931955994886
  0.20155625379439707 0.20507873639031693 0.20863687014525575
  0.21223075741405523 0.21586050011389926 0.2195261997292692 0.2232279573168085
  0.22696587351009836 0.23074004852434915 0.23455058216100522 0.238397573812271
  0.24228112246555486 0.24620132670783548 0.25015828472995344
  0.25415209433082675 0.2581828529215958 0.26225065752969623 0.26635560480286247
  0.2704977910130658 0.27467731206038465 0.2788942634768104 0.2831487404299921
  0.2874408377269175 0.29177064981753587 0.2961382707983211 0.3005437944157765
  0.3049873140698863 0.30946892281750854 0.31398871337571754 0.31854677812509186
  0.32314320911295075 0.3277780980565422 0.33245153634617935 0.33716361504833037
  0.3419144249086609 0.3467040563550296 0.35153259950043936 0.3564001441459435
  0.3613067797835095 0.3662525955988395 0.3712376804741491 0.3762621229909065
  0.38132601143253014 0.386429433787049 0.39157247774972326 0.39675523072562685
  0.4019777798321958 0.4072402119017367 0.41254261348390375 0.4178850708481375
  0.4232676699860717 0.4286904966139066 0.43415363617474895 0.4396571738409188
  0.44520119451622786 0.45078578283822346 0.45641102318040466 0.4620769996544071
  0.467783796112159 0.47353149614800955 0.4793201831008268 0.4851499400560704
  0.4910208498478356 0.4969329950608704 0.5028864580325687 0.5088813208549338
  0.5149176653765214 0.5209955732043543 0.5271151257058131 0.5332764040105052
  0.5394794890121072 0.5457244613701866 0.5520114015120001 0.5583403896342679
  0.5647115057049292 0.5711248294648731 0.5775804404296506 0.5840784178911641
  0.5906188409193369 0.5972017883637634 0.6038273388553378 0.6104955708078648
  0.6172065624196511 0.6239603916750761 0.6307571363461468 0.6375968739940326
  0.6444796819705821 0.6514056374198242 0.6583748172794485 0.665387298282272
  0.6724431569576875 0.6795424696330938 0.6866853124353135 0.6938717612919899
  0.7011018919329731 0.7083757798916868 0.7156935005064807 0.7230551289219693
  0.7304607400903537 0.7379104087727308 0.7454042095403874 0.7529422167760779
  0.7605245046752924 0.768151147247507 0.7758222183174236 0.7835377915261935
  0.7912979403326302 0.799102738014409 0.8069522576692516 0.8148465722161012
  0.8227857543962835 0.8307698767746546 0.83879901174074 0.846873231509858
  0.8549926081242338 0.8631572134541023 0.8713671191987972 0.8796223968878317
  0.8879231178819663 0.8962693533742664 0.9046611743911496 0.9130986517934192
  0.9215818562772946 0.9301108583754237 0.938685728457888 0.9473065367331999
  0.9559733532492861 0.9646862478944651 0.9734452903984125 0.9822505503331171
  0.9911020971138298 1;

// luminance($color)
// @requires $linear-channel-values [list]
// 설명: 단일 색상의 휘도(Luminance) 계산
// 참고: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
// 흰색 휘도는 1, 검정색 휘도는 0, 함수 또는 믹스 인에서 사용하기 위해 결과 값을 반환
// 사용법:
// .sample { luminance: luminance(#c00); }
// 출력 결과:
// .sample { luminance: 0.1283736922; }
//
@function luminance($color) {
  // $linear-channel-values는 상수 룩업 테이블입니다.
  $red: nth($linear-channel-values, red($color) + 1);
  $green: nth($linear-channel-values, green($color) + 1);
  $blue: nth($linear-channel-values, blue($color) + 1);
  $calculation: 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
  @return $calculation;
}

// color-contrast($fg, $bg)
// 설명: WCAG 2.1에 정의된 "가독성(readability)"을 계산합니다.
// 참고: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
// 공식: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
// 함수 또는 믹스 인에서 사용하기 위해 결과 값을 반환
// 사용법:
// .sample { color-contrast: color-contrast(#c00, #fff); }
// 출력 결과:
// .sample { color-contrast: 5.89; }
//
@function color-contrast($fg, $bg) {
  $luminance1: luminance($fg) + 0.05;
  $luminance2: luminance($bg) + 0.05;
  $ratio: $luminance1 / $luminance2;
  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }
  // 6.96은 7.0 비율을 통과하지 않아야하기 때문에 hundreth(소수점 이하의 2자리)로 반올림
  $ratio: round($ratio * 100) / 100;
  @return $ratio;
}

// validate-font-size($size)
// 설명: 단위에 따라 가능한 경우 글꼴 크기 값을 픽셀로 다시 계산
// 함수 또는 믹스 인에서 사용하기 위해 결과 값을 반환
// 사용법:
// .sample { validate-font-size: validate-font-size(1em); }
// 출력 결과:
// .sample { validate-font-size: 16; }
//
@function validate-font-size($size) {
  @if unit($size) ==
    'em' or
    unit($size) ==
    'rem' or
    unit($size) ==
    'px' or
    unit($size) ==
    ''
  {
    // 유연한 단위인 경우
    @if unit($size) == 'em' or unit($size) == 'rem' {
      // 유연한 값을 픽셀 값으로 변환
      @return remove-unit($size * 16);
    }
    // 픽셀 값인 경우
    @if unit($size) == 'px' {
      // PX를 기대하므로 단위를 제거한 후 반환
      @return remove-unit($size);
    }
    // 단위가 없는 경우
    @if unit($size) == '' {
      // 값을 그대로 반환
      @return $size;
    }
  } @else {
    @error '오류! validate-font-size(): 예상치 못한 글꼴 크기 단위가 제공되었습니다.';
  }
}

// get-ratio($level: 'AA', $size: 16, $bold: false)
// 설명: 글꼴 크기 및 WCAG 수준에 따라 사용할 올바른 비율 값 결정
// 함수 또는 믹스 인에서 사용하기 위해 결과 값을 반환
// 사용법:
// .sample { get-ratio: get-ratio('AAA', 19, true); }
// 출력 결과:
// .sample { get-ratio: 4.5; }
//
@function get-ratio($level: 'AA', $size: 16, $bold: false) {
  // 기본 비율
  $ratio: 4.5;
  @if $level == 'AAA' {
    $ratio: 7;
  }

  // 크기가 유효한지 확인: 값이 em, rem 또는 px(권장) 값이 아닌 경우 오류를 발생
  $size: validate-font-size($size);

  // 글자 크기 확인
  @if $size < 24 {
    // 작은 텍스트(기본값 사용)가 아닌 경우
    @if $size >= 19 and $bold == true {
      // 특별한 경우 : 작은 텍스트이지만 굵은 글씨
      @if $level == 'AAA' {
        $ratio: 4.5;
      } @else {
        $ratio: 3;
      }
    }
  } @else {
    // 24px 보다 큰 경우
    $ratio: 3;
    @if $level == 'AAA' {
      $ratio: 4.5;
    }
  }
  @return $ratio;
}

// light-or-dark($color)
// 설명: 흰색 또는 검정색 대비를 사용하여 색상이 "밝음" 또는 "어두움" 인지 확인
// 참고: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
// 함수 또는 믹스 인에서 사용하기 위해 결과 값을 반환
// 사용법:
// .sample { light-or-dark: light-or-dark(#c00); }
// 출력 결과:
// .sample { light-or-dark: "light"; }
//
@function light-or-dark($color) {
  $light-contrast: color-contrast($color, $white);
  $dark-contrast: color-contrast($color, $black);

  @if $light-contrast > $dark-contrast {
    // 흰색 대비가 검은 색보다 높기 때문에 "어두움"을 반환
    @return 'dark';
  } @else {
    // 반대일 경우 "밝음" 반환
    @return 'light';
  }
}

// most-legible-color($color)
// 설명: 특별한 상황에서는 특정 배경 색상 위에 검정 또는 하얀색 텍스트를 사용하고 싶을 경우가 있음
// 사용법:
// .sample {
//   background-color: #c00;
//   color: most-legible-color(#c00);
// }
// 출력 결과:
// .sample {
//   background-color: #c00;
//   color: #fff;
// }
@function most-legible-color($color) {
  $color-lod: light-or-dark($color);

  @if ($color-lod == 'dark') {
    @return $white;
  } @else {
    @return $black;
  }
}

// a11y-color($fg, $bg, $level: 'AA', $size: 16, $bold: false)
// 목표: 전달된 색상의 색조를 변경하지 않고, WCAG 2.1 수준을 통과하는 색상을 계산하여 반환
// 사용법:
// .sample {
//   background-color: #000;
//   color: a11y-color(#c0c, #000);
// }
// 출력 결과:
// .sample {
//   background-color: #000;
//   color: #d200d2;
// }
//
@function a11y-color($fg, $bg, $level: 'AA', $size: 16, $bold: false) {
  // 글자 크기 값이 허용 가능한 지 확인
  $font-size: validate-font-size($size);
  // 검사 수준, 글자 크기 및 글자 두께 등을 확인하여 적절한 비율을 반환 (3.0, 4.5 또는 7.0)
  $ratio: get-ratio($level, $font-size, $bold);
  // 주어진 전경, 배경색의 원본 대비 차를 계산
  $original-contrast: color-contrast($fg, $bg);

  // 원본 대비 차가 기준 비율보다 크거나 같은 경우
  @if $original-contrast >= $ratio {
    // 원본 전경색을 반환
    @return $fg;
  }

  // 그렇지 않을 경우
  @else {
    // 전경색의 밝기 모드를 확인
    $fg-lod: light-or-dark($fg);
    // 배경색의 밝기 모드를 확인
    $bg-lod: light-or-dark($bg);

    // "단계" 값을 설정하여 색상을 밝게 또는 어둡게 처리
    // 노트: 백분율 단계가 높을수록 컴파일 시간이 더 빨라지지만, 5%보다 큰 값으로 필요한 임계 값을 너무 초과 할 수 있음
    $step: 2%;

    @if $fg-lod == 'light' and $bg-lod == 'light' {
      // 둘 다 밝은 색상인 경우 fg를 어둡게
      $step: -$step;
    } @else if $fg-lod == 'dark' and $bg-lod == 'light' {
      // bg는 밝고, fg는 어둡지만 통과하지 않으므로 더 어둡게
      $step: -$step;
    }
    // 노트: 나머지 로직은 여기에 유지하지만, 기본 값은 변경되지 않으므로 이 로직은 필요하지 않음
    // @else if $fg-lod == 'light' and $bg-lod == 'dark' {
    //  // bg는 어둡고 fg는 밝지만 통과하지 않으므로 더 밝게
    //  $step: $step;
    // } @else if $fg-lod == 'dark' and $bg-lod == 'dark' {
    //  // 둘 다 어둡기 때문에 fg를 밝게
    //  $step: $step;
    // }

    // 색상 조합이 필요한 비율을 통과 할 때까지 @while 문으로 반복
    @while color-contrast($fg, $bg) < $ratio {
      // 표현식이 거짓이 될 때까지 단계 값으로 색상 조정. 색상에 따라 100번 이상 반복 될 수 있음.
      $fg: scale-color($fg, $lightness: $step, $saturation: $step/2);
    }

    // 계산된 $fg 반환
    @return $fg;
  }
}
